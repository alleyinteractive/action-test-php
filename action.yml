name: 'Run PHP tests'
description: 'Setup PHP environment and run install, audit, test, and build commands using Composer'
branding:
  icon: 'package'
  color: 'blue'
inputs:
  php-version:
    description: 'PHP version to use'
    required: false
    default: 'latest'
  php-tools:
    description: 'PHP tools to install (comma-separated)'
    required: false
    default: 'composer'
  php-extensions:
    description: 'Additional PHP extensions to install (comma-separated)'
    required: false
    default: >-
      apcu, bcmath, calendar, ctype, curl, date, dom, exif,
      filter, ftp, gd, gmp, gnupg, hash, iconv,
      igbinary, intl, json, libxml, mbstring, memcache,
      memcached, mysqli, mysqlnd, openssl, pcntl,
      pcre, pdo, pdo_mysql, pdo_sqlite, phar, posix, reflection,
      session, shmop, simplexml, soap, sockets, sodium, spl,
      sqlite3, ssh2, standard, sysvsem, sysvshm, timezonedb,
      tokenizer, xml, xmlreader, xmlwriter, zip, zlib
  php-coverage:
    description: 'Enable code coverage'
    required: false
    default: 'none'
  wordpress-version:
    description: 'Install WordPress related services for WP version'
    required: false
    default: 'latest'
  wordpress-multisite:
    description: 'Enable WordPress multisite'
    required: false
    default: 'false'
  wordpress-host:
    description: 'Shorthand for hosting provider (pantheon, vip, or false)'
    required: false
    default: 'vip'
  working-directory:
    description: 'Directory to run the commands in'
    required: false
    default: '.'
  cache-dependency-path:
    description: 'Path to the dependency file to use for caching'
    required: false
    default: 'composer.lock'
  install-skip:
    description: 'Skip composer install'
    required: false
    default: 'false'
  install-command:
    description: 'Command to run composer install'
    required: false
    default: 'composer install --prefer-dist --no-interaction --no-progress'
  audit-skip:
    description: 'Skip composer audit'
    required: false
    default: 'false'
  audit-command:
    description: 'Command to run composer audit'
    required: false
    default: 'composer audit --no-dev --locked --ansi --no-interaction'
  test-skip:
    description: 'Skip tests'
    required: false
    default: 'false'
  test-command:
    description: 'Command to run tests'
    required: false
    default: 'composer run-script test'
  build-command:
    description: 'Command to run build'
    required: false
    default: ''

runs:
  using: 'composite'

  steps:
    - name: Generate extension hash per PHP version and extensions
      id: extension-hash
      run: echo "hash=$(echo '${{ inputs.php-version }}-${{ inputs.php-extensions }}' | md5sum | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Setup cache environment
      id: extcache
      uses: shivammathur/cache-extensions@v1
      with:
        php-version: ${{ inputs.php-version }}
        extensions: ${{ inputs.php-extensions }}
        key: ${{ runner.os }}-php-${{ steps.extension-hash.outputs.hash }}

    - name: Cache extensions
      uses: actions/cache@v4
      with:
        path: ${{ steps.extcache.outputs.dir }}
        key: ${{ runner.os }}-php-${{ steps.extension-hash.outputs.hash }}
        restore-keys: ${{ runner.os }}-php-${{ steps.extension-hash.outputs.hash }}

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.php-version }}
        extensions: ${{ inputs.php-extensions }}
        tools: ${{ inputs.php-tools }}
        coverage: ${{ inputs.php-coverage}}

    - name: Get Composer paths
      id: composer-paths
      run: |
        echo "cache-dir=$(composer config --absolute cache-dir)" >> $GITHUB_ENV
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Cache Composer dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.cache-dir }}
        key: ${{ runner.os }}-composer-${{ inputs.php-version }}-${{ hashFiles(inputs.cache-dependency-path) }}
        restore-keys: |
          ${{ runner.os }}-composer-${{ inputs.php-version }}-${{ hashFiles(inputs.cache-dependency-path) }}

    - name: Install dependencies
      if: ${{ inputs.install-skip != 'true' }}
      run: ${{ inputs.install-command }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Run composer audit
      if: ${{ inputs.audit-skip != 'true' }}
      run: ${{ inputs.audit-command }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Start WordPress services
      if: ${{ inputs.wordpress-version != 'false' }}
      run: |
        docker-compose -f ${{ github.action_path }}/docker-compose.yml up -d
        # wait until mysql is responsive
        timeout=30
        while ! docker-compose -f ${{ github.action_path }}/docker-compose.yml exec mysql mysqladmin ping -h localhost --silent; do
          sleep 1
          timeout=$((timeout - 1))
          if [ "$timeout" -le 0 ]; then
            echo "MySQL did not become ready in time"
            exit 1
          fi
        done
      shell: bash

    - name: Setup WordPress with core test suite
      if: ${{ inputs.wordpress-version != ' false' && inputs.test-skip != 'true' }}
      shell: bash
      env:
        CACHEDIR: /tmp/test-cache # Likely unused
        WP_CORE_DIR: /tmp/wordpress
        WP_TESTS_DIR: /tmp/wordpress-tests-lib
        WP_VERSION: ${{ inputs.wordpress-version }}
        WP_DB_HOST: 127.0.0.1
        WP_DB_USER: root
        WP_DB_PASSWORD: '""'
        WP_MULTISITE: ${{ inputs.wordpress-multisite == true && 1 || 0 }}
        PACKAGE_DIRECTORY: ${{ format('{0}/wp-content/{1}/', '/tmp/wordpress', inputs.working-directory) }}
        WP_TEST_SKIP_DB_CREATE: false
        WP_INSTALL_VIP_MU_PLUGINS: ${{ inputs.wordpress-host == 'vip' && 'true' || 'false' }}
        # When hosting provider is VIP, object cache is memcached, when it is Pantheon, object cache is redis,
        INSTALL_OBJECT_CACHE: ${{ inputs.wordpress-host == 'vip' && 'memcached' || inputs.wordpress-host == 'pantheon' && 'redis' || 'false' }}
      run: |
        bash <(curl -s "https://raw.githubusercontent.com/alleyinteractive/mantle-ci/HEAD/install-wp-tests.sh") wordpress_unit_tests ${{ env.WP_DB_USER }} ${{ env.WP_DB_PASSWORD }} ${{ env.WP_DB_HOST }} ${{ env.WP_VERSION }} ${{ env.WP_TEST_SKIP_DB_CREATE }} ${{ env.WP_INSTALL_VIP_MU_PLUGINS }} ${{ env.INSTALL_OBJECT_CACHE }}
        # rsync -aWq --no-compress --exclude '.npm' --exclude '.git' --exclude ${WP_CORE_DIR} --exclude 'node_modules' . ${PACKAGE_DIRECTORY}
        # Debug for now
        ls -la ${PACKAGE_DIRECTORY}

    - name: Run tests
      if: ${{ inputs.test-skip != 'true' }}
      run: ${{ inputs.test-command }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Run build
      if: ${{ inputs.build-command != '' }}
      run: ${{ inputs.build-command }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}